{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/MovieSearchApp.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","MovieSearchApp","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","map","index","App","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAUeA,EARA,SAACC,GACZ,OACI,wBAAQC,UAAU,aAAlB,SACI,6BAAKD,EAAME,UCoBRC,EAnBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACPC,EACe,QAAjBD,EAAME,OALV,qGAKyDF,EAAME,OAC/D,OACI,sBAAKL,UAAU,QAAf,UACI,6BAAKG,EAAMG,QACX,8BACI,qBACIC,MAAM,MACNC,IAAG,4BAAuBL,EAAMG,OAChCG,IAAKL,MAGb,kCAAKD,EAAMO,KAAX,WCaGC,EA7BA,SAACZ,GAAW,IAAD,EACgBa,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,KAiBtB,OACI,uBAAMd,UAAU,SAAhB,UACI,uBACIe,MAAOF,EACPG,SAlBqB,SAACC,GAC9BH,EAAeG,EAAEC,OAAOH,QAkBhBI,KAAK,SAET,uBAAOC,QAbY,SAACH,GACxBA,EAAEI,iBACFtB,EAAMuB,OAAOT,GALbC,EAAe,KAgByBK,KAAK,SAASJ,MAAM,eCnB9DQ,EAAe,CACjBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAEZC,EAAU,SAACC,EAAOC,GACpB,OAAQA,EAAOV,MACX,IAAK,wBACD,OAAO,2BACAS,GADP,IAEIJ,SAAS,EACTE,aAAc,OAEtB,IAAK,wBACD,OAAO,2BACAE,GADP,IAEIJ,SAAS,EACTC,OAAQI,EAAOC,UAEvB,IAAK,wBACD,OAAO,2BACAF,GADP,IAEIJ,SAAS,EACTE,aAAcG,EAAOE,QAE7B,QACI,OAAOH,IAgEJI,EA7DQ,WAAO,IAAD,EACCC,qBAAWN,EAASJ,GADrB,mBAClBK,EADkB,KACXM,EADW,KAMzBC,qBAAU,WACNC,MAtCc,kDAuCTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFN,EAAS,CACLf,KAAM,wBACNW,QAASU,EAAa7B,cAGnC,IAEH,IAsBQc,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAC9B,OACI,sBAAKxB,UAAU,MAAf,UACI,cAAC,EAAD,CAAQC,KAAK,wBACb,cAAC,EAAD,CAAQqB,OA1BD,SAAAT,GACXqB,EAAS,CACLf,KAAM,0BAGViB,MAAM,8BAAD,OAA+BvB,EAA/B,qBACAwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACEA,EAAaC,SACbP,EAAS,CACLf,KAAM,wBACNW,QAASU,EAAa7B,eAgBlC,mBAAGX,UAAU,YAAb,mDACA,qBAAKA,UAAU,SAAf,SACKwB,IAAYE,EACT,8CACAA,EACA,qBAAK1B,UAAU,eAAf,SAA+B0B,IAEvBD,EAAOiB,KAAI,SAACvC,EAAOwC,GAAR,OACP,cAAC,EAAD,CAAuCxC,MAAOA,GAA9C,UAAewC,EAAf,YAAwBxC,EAAMG,iBC1E/CsC,MAXf,WACE,OACE,gCACE,oBAAIC,MAAM,MAAV,yBAGA,cAAC,EAAD,QCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.73028d2d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h2>{props.text}</h2>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n    \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\n\r\nconst Movie = ({ movie }) => {\r\n    const poster =\r\n        movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n    return (\r\n        <div className=\"movie\">\r\n            <h2>{movie.Title}</h2>\r\n            <div>\r\n                <img\r\n                    width=\"200\"\r\n                    alt={`The movie titled: ${movie.Title}`}\r\n                    src={poster}\r\n                />\r\n            </div>\r\n            <p>({movie.Year})</p>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Movie;","import React, { useState } from \"react\";\r\n\r\n\r\nconst Search = (props) => {\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n    const handleSearchInputChanges = (e) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    const resetInputField = () => {\r\n        setSearchValue(\"\")\r\n    }\r\n\r\n    const callSearchFunction = (e) => {\r\n        e.preventDefault();\r\n        props.search(searchValue);\r\n        resetInputField();\r\n    }\r\n\r\n    return (\r\n        <form className=\"search\">\r\n            <input\r\n                value={searchValue}\r\n                onChange={handleSearchInputChanges}\r\n                type=\"text\"\r\n            />\r\n            <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, { useReducer, useEffect } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Movie from \"./Movie\";\r\nimport Search from \"./Search\";\r\nimport './App.css';\r\n\r\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\r\n\r\nconst initialState = {\r\n    loading: true,\r\n    movies: [],\r\n    errorMessage: null\r\n};\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"SEARCH_MOVIES_REQUEST\":\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                errorMessage: null\r\n            };\r\n        case \"SEARCH_MOVIES_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                movies: action.payload\r\n            };\r\n        case \"SEARCH_MOVIES_FAILURE\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst MovieSearchApp = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    // userEffect is a hook, get called after every update, accept two arguments, the function that we want to run, \r\n    // the array which will invoke function to run when its value get changed, if it is empty, it will run only once\r\n    // Similar to componentDidMount and componentDidUpdate:\r\n    useEffect(() => {\r\n        fetch(MOVIE_API_URL)\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                dispatch({\r\n                    type: \"SEARCH_MOVIES_SUCCESS\",\r\n                    payload: jsonResponse.Search\r\n                });\r\n            });\r\n    }, []);\r\n\r\n    const search = searchValue => {\r\n        dispatch({\r\n            type: \"SEARCH_MOVIES_REQUEST\"\r\n        });\r\n\r\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                if (jsonResponse.Response === \"True\") {\r\n                    dispatch({\r\n                        type: \"SEARCH_MOVIES_SUCCESS\",\r\n                        payload: jsonResponse.Search\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: \"SEARCH_MOVIES_SUCCESS\",\r\n                        payload: jsonResponse.Search\r\n                    });\r\n                }\r\n            });\r\n    };\r\n\r\n    const { movies, errorMessage, loading } = state;\r\n    return (\r\n        <div className=\"App\">\r\n            <Header text=\"MOVIE SEARCH ENGINE\" />\r\n            <Search search={search} />\r\n            <p className=\"App-intro\">Sharing a few of our favourite movies</p>\r\n            <div className=\"movies\">\r\n                {loading && !errorMessage ? (\r\n                    <span>loading...</span>\r\n                ) : errorMessage ? (\r\n                    <div className=\"errorMessage\">{errorMessage}</div>\r\n                ) : (\r\n                            movies.map((movie, index) => (\r\n                                <Movie key={`${index}-${movie.Title}`} movie={movie} />\r\n                            ))\r\n                        )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default MovieSearchApp;","import './App.css';\nimport MovieSearchApp from './MovieSearchApp';\n\n// TODO: use router to config different app\nfunction App() {\n  return (\n    <div>\n      <h1 class=\"App\">\n        Hello Chang\n    </h1>\n      <MovieSearchApp></MovieSearchApp>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}